{{$label := .Values.backend.label}}

{{- define "blockedtodo.backend.environment_variables" -}}

{{- $secrets := .Values.backend.secrets -}}
{{- $database_secrets := .Values.database.secrets -}}
{{- $frontend_secrets := .Values.frontend.secrets -}}

- name: NODE_ENV
  value: {{.Values.environment}}
- name: ENCRYPTION_SECRET
  value: {{$secrets.encryption_secret}}
- name: GITHUB_WEBHOOKS_SECRET
  value: {{$secrets.github_webhooks_secret | squote}}
- name: GITHUB_APP_ID
  value: {{$secrets.github_app_id | squote}}
- name: GITHUB_APP_PRIVATE_KEY
  value: {{$secrets.github_app_private_key | squote}}
- name: GITHUB_CLIENT_ID
  value: {{$secrets.github_client_id | squote}}
- name: GITHUB_CLIENT_SECRET
  value: {{$secrets.github_client_secret | squote}}
- name: DATABASE_NAME
  value: {{$database_secrets.database_name}}
- name: DATABASE_USER
  value: {{$database_secrets.database_user}}
- name: DATABASE_PASSWORD
  value: {{$database_secrets.database_password}}
- name: DATABASE_HOST
  value: {{.Values.database.label}}-service
- name: DATABASE_PORT
  value: {{$database_secrets.database_port | squote}}
- name: BACKEND_PROTOCOL
  value: {{.Values.backend.protocol}}
- name: BACKEND_HOST
  value: {{.Values.backend.host}}
- name: BACKEND_PORT
  value: {{.Values.backend.port | squote}}
- name: FRONTEND_PROTOCOL
  value: {{.Values.frontend.protocol}}
- name: FRONTEND_HOST
  value: {{.Values.frontend.host}}
- name: FRONTEND_PORT
  value: {{.Values.frontend.port | squote}}
{{- end -}}

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{$label}}-deployment
  labels:
    app: {{$label}}
  namespace: {{.Values.namespace}}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: {{$label}}
  template:
    metadata:
      labels:
        app: {{$label}}
    spec:
      containers:
      - name: backend
        image: {{.Values.backend.image}}
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 3000
        livenessProbe:
          httpGet:
            path: /health
            port: 3000
          timeoutSeconds: 8
          failureThreshold: 4
          initialDelaySeconds: 60
        readinessProbe:
          httpGet:
            path: /health
            port: 3000
          timeoutSeconds: 8
          failureThreshold: 4
          initialDelaySeconds: 60
        env:
        {{- include "blockedtodo.backend.environment_variables" . | nindent 8}}

---

apiVersion: v1
kind: Service
metadata:
  name: {{$label}}-service
  namespace: {{.Values.namespace}}
spec:
  type: NodePort
  selector:
    app: {{$label}}
  ports:
  - port: {{.Values.backend.port}}
    targetPort: 3000

---

apiVersion: batch/v1beta1
kind: CronJob
metadata:
  name: database-backup-cronjob
  namespace: {{.Values.namespace}}
spec:
  schedule: "0 3 * * *"
  successfulJobsHistoryLimit: 1
  failedJobsHistoryLimit: 2
  jobTemplate:
    spec:
      template:
        spec:
          restartPolicy: OnFailure
          containers:
          - name: database-backup-job
            image: {{.Values.backend.image}}
            imagePullPolicy: IfNotPresent
            command: ["npm"]
            args: ["run", "db:backup"]
            env:
            {{- include "blockedtodo.backend.environment_variables" . | nindent 12}}
            - name: BACKUPS_BUCKET_NAME
              value: {{.Values.backups_bucket_name}}

---

apiVersion: batch/v1beta1
kind: CronJob
metadata:
  name: repository-scan-cronjob
  namespace: {{.Values.namespace}}
spec:
  schedule: "0 3 * * *"
  successfulJobsHistoryLimit: 1
  failedJobsHistoryLimit: 2
  jobTemplate:
    spec:
      template:
        spec:
          restartPolicy: OnFailure
          containers:
          - name: repository-scan-job
            image: {{.Values.backend.image}}
            imagePullPolicy: IfNotPresent
            command: ["npm"]
            args: ["run", "scan:all"]
            env:
            {{- include "blockedtodo.backend.environment_variables" . | nindent 12}}
