steps:
    - id: 'Build images'
      name: 'docker/compose:1.24.1'
      args: ['--file', 'services/docker-compose.yaml', 'build', '--parallel']
      waitFor: ['-']

    # Run containers in the background
    - id: 'Run containers'
      name: 'docker/compose:1.24.1'
      args: ['--file', 'services/docker-compose.yaml', 'up', '--detach']

    - id: 'Backend tests'
      name: 'docker/compose:1.24.1'
      args: ['--file', 'services/docker-compose.yaml', 'exec', '-T', 'backend', 'npm', 'run', 'test']
      waitFor: ['Run containers']

    - id: 'Frontend tests'
      name: 'docker/compose:1.24.1'
      args: ['--file', 'services/docker-compose.yaml', 'exec', '-T', 'frontend', 'npm', 'run', 'test']
      waitFor: ['Run containers']

    - id: 'Website tests'
      name: 'docker/compose:1.24.1'
      args: ['--file', 'services/docker-compose.yaml', 'exec', '-T', 'website', 'npm', 'run', 'test']
      waitFor: ['Run containers']

    - id: 'Tag backend image'
      name: 'gcr.io/cloud-builders/docker'
      args: ['tag', 'backend:latest', 'gcr.io/$PROJECT_ID/$_BACKEND_SERVICE_NAME:$SHORT_SHA']
      waitFor: ['Build images']

    - id: 'Tag frontend image'
      name: 'gcr.io/cloud-builders/docker'
      args: ['tag', 'frontend:latest', 'gcr.io/$PROJECT_ID/$_FRONTEND_SERVICE_NAME:$SHORT_SHA']
      waitFor: ['Build images']

    - id: 'Tag website image'
      name: 'gcr.io/cloud-builders/docker'
      args: ['tag', 'website:latest', 'gcr.io/$PROJECT_ID/$_WEBSITE_SERVICE_NAME:$SHORT_SHA']
      waitFor: ['Build images']

    - id: 'Push backend image to registry'
      name: 'gcr.io/cloud-builders/docker'
      args: ['push', 'gcr.io/$PROJECT_ID/$_BACKEND_SERVICE_NAME']
      waitFor: ['Tag backend image']

    - id: 'Push frontend image to registry'
      name: 'gcr.io/cloud-builders/docker'
      args: ['push', 'gcr.io/$PROJECT_ID/$_FRONTEND_SERVICE_NAME']
      waitFor: ['Tag frontend image']

    - id: 'Push website image to registry'
      name: 'gcr.io/cloud-builders/docker'
      args: ['push', 'gcr.io/$PROJECT_ID/$_WEBSITE_SERVICE_NAME']
      waitFor: ['Tag website image']

    - id: 'Promote backend image to latest'
      name: 'gcr.io/cloud-builders/gcloud'
      entrypoint: 'bash'
      args:
        - '-c'
        - |
          [[ "$BRANCH_NAME" == "master" ]] && gcloud container images add-tag gcr.io/$PROJECT_ID/$_BACKEND_SERVICE_NAME:$SHORT_SHA gcr.io/$PROJECT_ID/$_BACKEND_SERVICE_NAME:latest || echo "skipping..."

    - id: 'Promote frontend image to latest'
      name: 'gcr.io/cloud-builders/gcloud'
      entrypoint: 'bash'
      args:
        - '-c'
        - |
          [[ "$BRANCH_NAME" == "master" ]] && gcloud container images add-tag gcr.io/$PROJECT_ID/$_FRONTEND_SERVICE_NAME:$SHORT_SHA gcr.io/$PROJECT_ID/$_FRONTEND_SERVICE_NAME:latest || echo "skipping..."

    - id: 'Promote website image to latest'
      name: 'gcr.io/cloud-builders/gcloud'
      entrypoint: 'bash'
      args:
        - '-c'
        - |
          [[ "$BRANCH_NAME" == "master" ]] && gcloud container images add-tag gcr.io/$PROJECT_ID/$_WEBSITE_SERVICE_NAME:$SHORT_SHA gcr.io/$PROJECT_ID/$_WEBSITE_SERVICE_NAME:latest || echo "skipping..."

    - id: 'Fetch production secrets'
      name: 'gcr.io/cloud-builders/gcloud'
      entrypoint: 'bash'
      args: ['-c', '[[ "$BRANCH_NAME" == "master" ]] && gcloud secrets versions access latest --secret=$_PRODUCTION_SECRET_ID > production-values.yaml || echo "skipping..."']

    # Note: this requires the helm community builder to be setup.
    # See this guide: https://cloud.google.com/cloud-build/docs/configuring-builds/use-community-and-custom-builders
    # BlockedTODO: https://github.com/helm/helm/issues/5696
    # Remove backend.image, frontend.image, and website.image overrides if @schollii's suggestion is approved
    - id: 'Deploy images to GKE cluster'
      name: 'gcr.io/$PROJECT_ID/helm'
      entrypoint: 'bash'
      args:
        - '-c'
        - |
          [[ "$BRANCH_NAME" == "master" ]] &&
          gcloud container clusters get-credentials --zone "$_CLUSTER_LOCATION" "$_CLUSTER_NAME" &&
          helm upgrade --install --values production-values.yaml
          --set backend.image=gcr.io/$PROJECT_ID/$_BACKEND_SERVICE_NAME:$SHORT_SHA
          --set frontend.image=gcr.io/$PROJECT_ID/$_FRONTEND_SERVICE_NAME:$SHORT_SHA
          --set website.image=gcr.io/$PROJECT_ID/$_WEBSITE_SERVICE_NAME:$SHORT_SHA
          blockedtodo ./helm || echo "skipping..."
      env:
        - 'CLOUDSDK_COMPUTE_ZONE=$_CLUSTER_LOCATION'
        - 'CLOUDSDK_CONTAINER_CLUSTER=$_CLUSTER_NAME'
        - 'TILLERLESS=true'

substitutions: # default values
    _BACKEND_SERVICE_NAME: ''
    _FRONTEND_SERVICE_NAME: ''
    _WEBSITE_SERVICE_NAME: ''
    _PRODUCTION_SECRET_ID: ''
    _CLUSTER_LOCATION: ''
    _CLUSTER_NAME: ''

timeout: 1800s
